
F-00004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000656  000006ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000656  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  00800102  00800102  000006ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000071c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000760  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab6  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000422  00000000  00000000  00001286  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004de  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001b88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000498  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ae  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002a42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_1>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  6c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  70:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  74:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  78:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

0000007c <__trampolines_end>:
  7c:	09 02       	muls	r16, r25
  7e:	12 00       	.word	0x0012	; ????
  80:	01 01       	movw	r0, r2
  82:	00 80       	ld	r0, Z
  84:	32 09       	sbc	r19, r2
  86:	04 00       	.word	0x0004	; ????
  88:	00 00       	nop
  8a:	00 00       	nop
	...

0000008e <usbDescriptorDevice>:
  8e:	12 01 10 01 ff 00 00 08 c0 16 df 05 00 01 01 02     ................
  9e:	03 01                                               ..

000000a0 <usbDescriptorStringSerialNumber>:
  a0:	12 03 30 00 78 00 30 00 30 00 30 00 30 00 30 00     ..0.x.0.0.0.0.0.
  b0:	30 00                                               0.

000000b2 <usbDescriptorStringDevice>:
  b2:	0a 03 4c 00 49 00 42 00 53 00                       ..L.I.B.S.

000000bc <usbDescriptorStringVendor>:
  bc:	14 03 41 00 70 00 6c 00 69 00 6b 00 61 00 63 00     ..A.p.l.i.k.a.c.
  cc:	6e 00 69 00                                         n.i.

000000d0 <usbDescriptorString0>:
  d0:	04 03 09 04                                         ....

000000d4 <__ctors_end>:
  d4:	11 24       	eor	r1, r1
  d6:	1f be       	out	0x3f, r1	; 63
  d8:	cf ef       	ldi	r28, 0xFF	; 255
  da:	d0 e1       	ldi	r29, 0x10	; 16
  dc:	de bf       	out	0x3e, r29	; 62
  de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_copy_data>:
  e0:	11 e0       	ldi	r17, 0x01	; 1
  e2:	a0 e0       	ldi	r26, 0x00	; 0
  e4:	b1 e0       	ldi	r27, 0x01	; 1
  e6:	e6 e5       	ldi	r30, 0x56	; 86
  e8:	f6 e0       	ldi	r31, 0x06	; 6
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x10>
  ec:	05 90       	lpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	a2 30       	cpi	r26, 0x02	; 2
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0xc>

000000f6 <__do_clear_bss>:
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	a2 e0       	ldi	r26, 0x02	; 2
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	ad 32       	cpi	r26, 0x2D	; 45
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 f7 01 	call	0x3ee	; 0x3ee <main>
 10a:	0c 94 29 03 	jmp	0x652	; 0x652 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 112:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 114:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 116:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 118:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 11a:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 11c:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 11e:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 120:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 122:	09 c0       	rjmp	.+18     	; 0x136 <usbCrcLoopEntry>

00000124 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 124:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 126:	82 27       	eor	r24, r18

00000128 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 128:	97 95       	ror	r25
    ror     resCrcL
 12a:	87 95       	ror	r24
    brcs    usbCrcNoXor
 12c:	10 f0       	brcs	.+4      	; 0x132 <usbCrcNoXor>
    eor     resCrcL, polyL
 12e:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 130:	95 27       	eor	r25, r21

00000132 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 132:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 134:	c8 f3       	brcs	.-14     	; 0x128 <usbCrcBitLoop>

00000136 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 136:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 138:	a8 f3       	brcs	.-22     	; 0x124 <usbCrcByteLoop>

0000013a <usbCrcReady>:
usbCrcReady:
    ret
 13a:	08 95       	ret

0000013c <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 13c:	ea df       	rcall	.-44     	; 0x112 <usbCrc16>
    st      ptr+, resCrcL
 13e:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 140:	9d 93       	st	X+, r25
    ret
 142:	08 95       	ret

00000144 <__vector_1>:
;----------------------------------------------------------------------------
; order of registers pushed: 
;	YL, SREG [sofError] YH, shift, x1, x2, x3, bitcnt, cnt, x4
;----------------------------------------------------------------------------
USB_INTR_VECTOR:              
    push    YL                   ;2 	push only what is necessary to sync with edge ASAP
 144:	cf 93       	push	r28
    in      YL, SREG             ;1 
 146:	cf b7       	in	r28, 0x3f	; 63
    push    YL                   ;2 
 148:	cf 93       	push	r28

0000014a <waitForJ>:
;   sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 14a:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 14c:	4c 9b       	sbis	0x09, 4	; 9
    brne    waitForJ        ; just make sure we have ANY timeout
 14e:	e9 f7       	brne	.-6      	; 0x14a <waitForJ>

00000150 <waitForK>:
;-------------------------------------------------------------------------------
; The following code results in a sampling window of < 1/4 bit 
;	which meets the spec.
;-------------------------------------------------------------------------------
waitForK:			 ;- 
    sbis    USBIN, USBMINUS      ;1 [00] <-- sample
 150:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK               ;2 [01]
 152:	0b c0       	rjmp	.+22     	; 0x16a <foundK>
    sbis    USBIN, USBMINUS	 ;	 <-- sample
 154:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 156:	09 c0       	rjmp	.+18     	; 0x16a <foundK>
    sbis    USBIN, USBMINUS	 ;	 <-- sample
 158:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 15a:	07 c0       	rjmp	.+14     	; 0x16a <foundK>
    sbis    USBIN, USBMINUS	 ;	 <-- sample
 15c:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 15e:	05 c0       	rjmp	.+10     	; 0x16a <foundK>
    sbis    USBIN, USBMINUS	 ;	 <-- sample
 160:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 162:	03 c0       	rjmp	.+6      	; 0x16a <foundK>
    sbis    USBIN, USBMINUS	 ;	 <-- sample
 164:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 166:	01 c0       	rjmp	.+2      	; 0x16a <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 168:	c0 c0       	rjmp	.+384    	; 0x2ea <sofError>

0000016a <foundK>:
; 	we have 1 bit time for setup purposes, then sample again. 
;	Numbers in brackets are cycles from center of first sync (double K) 
;	bit after the instruction
;------------------------------------------------------------------------------
foundK:                          ;- [02]
    lds     YL, usbInputBufOffset;2 [03+04]	tx loop
 16a:	c0 91 10 01 	lds	r28, 0x0110
    push    YH                   ;2 [05+06]
 16e:	df 93       	push	r29
    clr     YH                   ;1 [07]
 170:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf)) ;1 [08] 	[rx loop init]
 172:	c9 5e       	subi	r28, 0xE9	; 233
    sbci    YH, hi8(-(usbRxBuf)) ;1 [09] 	[rx loop init]
 174:	de 4f       	sbci	r29, 0xFE	; 254
    push    shift                ;2 [10+11]
 176:	2f 93       	push	r18
    ser	    shift		 ;1 [12]
 178:	2f ef       	ldi	r18, 0xFF	; 255
    sbis    USBIN, USBMINUS      ;1 [-1] [13] <--sample:we want two bits K (sample 1 cycle too early)
 17a:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    haveTwoBitsK         ;2 [00] [14]
 17c:	03 c0       	rjmp	.+6      	; 0x184 <haveTwoBitsK>
    pop     shift                ;2 	 [15+16] undo the push from before
 17e:	2f 91       	pop	r18
    pop     YH 			 ;2 	 [17+18] undo the push from before
 180:	df 91       	pop	r29
    rjmp    waitForK             ;2 	 [19+20] this was not the end of sync, retry
 182:	e6 cf       	rjmp	.-52     	; 0x150 <waitForK>

00000184 <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:			;- [01]
    push    x1              	;2 [02+03]
 184:	0f 93       	push	r16
    push    x2              	;2 [04+05]
 186:	1f 93       	push	r17
    push    x3              	;2 [06+07]
 188:	4f 93       	push	r20
    push    bitcnt              ;2 [08+09]	
 18a:	6f 93       	push	r22
    in      x1, USBIN       	;1 [00] [10] <-- sample bit 0
 18c:	09 b1       	in	r16, 0x09	; 9
    bst     x1, USBMINUS    	;1 [01]
 18e:	04 fb       	bst	r16, 4
    bld     shift, 0        	;1 [02]
 190:	20 f9       	bld	r18, 0
    push    cnt             	;2 [03+04]
 192:	3f 93       	push	r19
    ldi     cnt, USB_BUFSIZE	;1 [05] 
 194:	3b e0       	ldi	r19, 0x0B	; 11
    push    x4              	;2 [06+07] tx loop
 196:	5f 93       	push	r21
    rjmp    rxLoop          	;2 [08]
 198:	1e c0       	rjmp	.+60     	; 0x1d6 <rxLoop>

0000019a <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------
unstuff0:               	;- [07] (branch taken)
    andi    x3, ~0x01   	;1 [08]
 19a:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      	;1 [09] x2 contains last sampled (stuffed) bit
 19c:	01 2f       	mov	r16, r17
    in      x2, USBIN   	;1 [00] [10] <-- sample bit 1 again
 19e:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK 	;1 [01]
 1a0:	14 71       	andi	r17, 0x14	; 20
    breq    se0Hop         	;1 [02] SE0 check for bit 1 
 1a2:	e1 f0       	breq	.+56     	; 0x1dc <se0Hop>
    ori     shift, 0x01 	;1 [03] 0b00000001
 1a4:	21 60       	ori	r18, 0x01	; 1
    nop				;1 [04]
 1a6:	00 00       	nop
    rjmp    didUnstuff0 	;2 [05]
 1a8:	1d c0       	rjmp	.+58     	; 0x1e4 <didUnstuff0>

000001aa <unstuff1>:
;-----------------------------------------------------
unstuff1:               	;- [05] (branch taken)
    mov     x2, x1      	;1 [06] x1 contains last sampled (stuffed) bit
 1aa:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   	;1 [07]
 1ac:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 	;1 [08] 0b00000010
 1ae:	22 60       	ori	r18, 0x02	; 2
    nop                 	;1 [09]
 1b0:	00 00       	nop
    in      x1, USBIN   	;1 [00] [10] <-- sample bit 2 again
 1b2:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK 	;1 [01]
 1b4:	04 71       	andi	r16, 0x14	; 20
    breq    se0Hop         	;1 [02] SE0 check for bit 2 
 1b6:	91 f0       	breq	.+36     	; 0x1dc <se0Hop>
    rjmp    didUnstuff1 	;2 [03]
 1b8:	1d c0       	rjmp	.+58     	; 0x1f4 <didUnstuff1>

000001ba <unstuff2>:
;-----------------------------------------------------
unstuff2:               	;- [05] (branch taken)
    andi    x3, ~0x04   	;1 [06]
 1ba:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 	;1 [07] 0b00000100
 1bc:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      	;1 [08] x2 contains last sampled (stuffed) bit
 1be:	01 2f       	mov	r16, r17
    nop                 	;1 [09]
 1c0:	00 00       	nop
    in      x2, USBIN   	;1 [00] [10] <-- sample bit 3
 1c2:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK 	;1 [01]
 1c4:	14 71       	andi	r17, 0x14	; 20
    breq    se0Hop         	;1 [02] SE0 check for bit 3 
 1c6:	51 f0       	breq	.+20     	; 0x1dc <se0Hop>
    rjmp    didUnstuff2 	;2 [03]
 1c8:	1e c0       	rjmp	.+60     	; 0x206 <didUnstuff2>

000001ca <unstuff3>:
;-----------------------------------------------------
unstuff3:               	;- [00] [10]  (branch taken)
    in      x2, USBIN   	;1 [01] [11] <-- sample stuffed bit 3 one cycle too late
 1ca:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK 	;1 [02]
 1cc:	14 71       	andi	r17, 0x14	; 20
    breq    se0Hop         	;1 [03] SE0 check for stuffed bit 3 
 1ce:	31 f0       	breq	.+12     	; 0x1dc <se0Hop>
    andi    x3, ~0x08   	;1 [04]
 1d0:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 	;1 [05] 0b00001000
 1d2:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 	;2 [06]
 1d4:	1b c0       	rjmp	.+54     	; 0x20c <didUnstuff3>

000001d6 <rxLoop>:
; bit 5:    SE0 check, none
; bit 6:    SE0 check, none
; bit 7:    SE0 check, reconstruct: x3 is 0 at bit locations we changed, 1 at others
;----------------------------------------------------------------------------
rxLoop:				;- [09]
    in      x2, USBIN   	;1 [00] [10] <-- sample bit 1 (or possibly bit 0 stuffed)
 1d6:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK 	;1 [01]
 1d8:	14 71       	andi	r17, 0x14	; 20
    brne    SkipSe0Hop		;1 [02]
 1da:	09 f4       	brne	.+2      	; 0x1de <SkipSe0Hop>

000001dc <se0Hop>:
se0Hop:				;- [02]
    rjmp    se0         	;2 [03] SE0 check for bit 1 
 1dc:	62 c0       	rjmp	.+196    	; 0x2a2 <se0>

000001de <SkipSe0Hop>:
SkipSe0Hop:			;- [03]
    ser     x3          	;1 [04]
 1de:	4f ef       	ldi	r20, 0xFF	; 255
    andi    shift, 0xf9 	;1 [05] 0b11111001
 1e0:	29 7f       	andi	r18, 0xF9	; 249
    breq    unstuff0    	;1 [06]
 1e2:	d9 f2       	breq	.-74     	; 0x19a <unstuff0>

000001e4 <didUnstuff0>:
didUnstuff0:			;- [06]
    eor     x1, x2      	;1 [07]
 1e4:	01 27       	eor	r16, r17
    bst     x1, USBMINUS	;1 [08]
 1e6:	04 fb       	bst	r16, 4
    bld     shift, 1    	;1 [09] 
 1e8:	21 f9       	bld	r18, 1
    in      x1, USBIN   	;1 [00] [10] <-- sample bit 2 (or possibly bit 1 stuffed)
 1ea:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK 	;1 [01]
 1ec:	04 71       	andi	r16, 0x14	; 20
    breq    se0Hop         	;1 [02] SE0 check for bit 2 
 1ee:	b1 f3       	breq	.-20     	; 0x1dc <se0Hop>
    andi    shift, 0xf3 	;1 [03] 0b11110011
 1f0:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    	;1 [04] do remaining work for bit 1
 1f2:	d9 f2       	breq	.-74     	; 0x1aa <unstuff1>

000001f4 <didUnstuff1>:
didUnstuff1:			;- [04]
    eor     x2, x1      	;1 [05]
 1f4:	10 27       	eor	r17, r16
    bst     x2, USBMINUS	;1 [06]
 1f6:	14 fb       	bst	r17, 4
    bld     shift, 2    	;1 [07]
 1f8:	22 f9       	bld	r18, 2
    nop2			;2 [08+09]
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <didUnstuff1+0x8>
    in      x2, USBIN   	;1 [00] [10] <-- sample bit 3 (or possibly bit 2 stuffed)
 1fc:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK 	;1 [01]
 1fe:	14 71       	andi	r17, 0x14	; 20
    breq    se0Hop         	;1 [02] SE0 check for bit 3 
 200:	69 f3       	breq	.-38     	; 0x1dc <se0Hop>
    andi    shift, 0xe7 	;1 [03] 0b11100111
 202:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    	;1 [04]
 204:	d1 f2       	breq	.-76     	; 0x1ba <unstuff2>

00000206 <didUnstuff2>:
didUnstuff2:			;- [04]
    eor     x1, x2      	;1 [05]
 206:	01 27       	eor	r16, r17
    bst     x1, USBMINUS	;1 [06]
 208:	04 fb       	bst	r16, 4
    bld     shift, 3    	;1 [07]
 20a:	23 f9       	bld	r18, 3

0000020c <didUnstuff3>:
didUnstuff3:			;- [07]
    andi    shift, 0xcf 	;1 [08] 0b11001111
 20c:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    	;1 [09]
 20e:	e9 f2       	breq	.-70     	; 0x1ca <unstuff3>
    in      x1, USBIN   	;1 [00] [10] <-- sample bit 4
 210:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK 	;1 [01]
 212:	04 71       	andi	r16, 0x14	; 20
    breq    se0Hop         	;1 [02] SE0 check for bit 4
 214:	19 f3       	breq	.-58     	; 0x1dc <se0Hop>
    eor     x2, x1      	;1 [03]
 216:	10 27       	eor	r17, r16
    bst     x2, USBMINUS	;1 [04]
 218:	14 fb       	bst	r17, 4
    bld     shift, 4    	;1 [05]
 21a:	24 f9       	bld	r18, 4

0000021c <didUnstuff4>:
didUnstuff4:			;- [05]
    andi    shift, 0x9f 	;1 [06] 0b10011111
 21c:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    	;1 [07]
 21e:	29 f1       	breq	.+74     	; 0x26a <unstuff4>
    nop2			;2 [08+09]
 220:	00 c0       	rjmp	.+0      	; 0x222 <didUnstuff4+0x6>
    in      x2, USBIN   	;1 [00] [10] <-- sample bit 5
 222:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK 	;1 [01]
 224:	14 71       	andi	r17, 0x14	; 20
    breq    se0         	;1 [02] SE0 check for bit 5
 226:	e9 f1       	breq	.+122    	; 0x2a2 <se0>
    eor     x1, x2      	;1 [03]
 228:	01 27       	eor	r16, r17
    bst     x1, USBMINUS	;1 [04]
 22a:	04 fb       	bst	r16, 4
    bld     shift, 5    	;1 [05]
 22c:	25 f9       	bld	r18, 5

0000022e <didUnstuff5>:
didUnstuff5:			;- [05]
    andi    shift, 0x3f 	;1 [06] 0b00111111
 22e:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    	;1 [07]
 230:	11 f1       	breq	.+68     	; 0x276 <unstuff5>
    nop2			;2 [08+09]
 232:	00 c0       	rjmp	.+0      	; 0x234 <didUnstuff5+0x6>
    in      x1, USBIN   	;1 [00] [10] <-- sample bit 6
 234:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK 	;1 [01]
 236:	04 71       	andi	r16, 0x14	; 20
    breq    se0         	;1 [02] SE0 check for bit 6
 238:	a1 f1       	breq	.+104    	; 0x2a2 <se0>
    eor     x2, x1      	;1 [03]
 23a:	10 27       	eor	r17, r16
    bst     x2, USBMINUS	;1 [04]
 23c:	14 fb       	bst	r17, 4
    bld     shift, 6   	 	;1 [05]
 23e:	26 f9       	bld	r18, 6

00000240 <didUnstuff6>:
didUnstuff6:			;- [05]
    cpi     shift, 0x02 	;1 [06] 0b00000010
 240:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    	;1 [07]
 242:	f8 f0       	brcs	.+62     	; 0x282 <unstuff6>
    nop2			;2 [08+09]
 244:	00 c0       	rjmp	.+0      	; 0x246 <didUnstuff6+0x6>
    in      x2, USBIN   	;1 [00] [10] <-- sample bit 7
 246:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK 	;1 [01]
 248:	14 71       	andi	r17, 0x14	; 20
    breq    se0         	;1 [02] SE0 check for bit 7
 24a:	59 f1       	breq	.+86     	; 0x2a2 <se0>
    eor     x1, x2      	;1 [03]
 24c:	01 27       	eor	r16, r17
    bst     x1, USBMINUS	;1 [04]
 24e:	04 fb       	bst	r16, 4
    bld     shift, 7    	;1 [05]
 250:	27 f9       	bld	r18, 7

00000252 <didUnstuff7>:
didUnstuff7:			;- [05] 
    cpi     shift, 0x04 	;1 [06] 0b00000100
 252:	24 30       	cpi	r18, 0x04	; 4
    brlo    unstuff7		;1 [07]
 254:	e0 f0       	brcs	.+56     	; 0x28e <unstuff7>
    eor     x3, shift   	;1 [08] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 256:	42 27       	eor	r20, r18
    nop				;1 [09]
 258:	00 00       	nop
    in      x1, USBIN   	;1 [00]	[10] <-- sample bit 0
 25a:	09 b1       	in	r16, 0x09	; 9
    st      y+, x3      	;2 [01+02] store data
 25c:	49 93       	st	Y+, r20
    eor     x2, x1      	;1 [03]
 25e:	10 27       	eor	r17, r16
    bst     x2, USBMINUS	;1 [04]
 260:	14 fb       	bst	r17, 4
    bld     shift, 0    	;1 [05]
 262:	20 f9       	bld	r18, 0
    subi    cnt, 1		;1 [06]
 264:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow	;1 [07]
 266:	c8 f0       	brcs	.+50     	; 0x29a <overflow>
    rjmp    rxLoop		;2 [08]
 268:	b6 cf       	rjmp	.-148    	; 0x1d6 <rxLoop>

0000026a <unstuff4>:
;-----------------------------------------------------
unstuff4:               	;- [08] 
    andi    x3, ~0x10   	;1 [09]
 26a:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   	;1 [00] [10] <-- sample stuffed bit 4
 26c:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK 	;1 [01]
 26e:	04 71       	andi	r16, 0x14	; 20
    breq    se0         	;1 [02] SE0 check for stuffed bit 4
 270:	c1 f0       	breq	.+48     	; 0x2a2 <se0>
    ori     shift, 0x10 	;1 [03]
 272:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 	;2 [04]
 274:	d3 cf       	rjmp	.-90     	; 0x21c <didUnstuff4>

00000276 <unstuff5>:
;-----------------------------------------------------
unstuff5:               	;- [08] 
    ori     shift, 0x20 	;1 [09]
 276:	20 62       	ori	r18, 0x20	; 32
    in      x2, USBIN   	;1 [00] [10] <-- sample stuffed bit 5
 278:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK 	;1 [01]
 27a:	14 71       	andi	r17, 0x14	; 20
    breq    se0         	;1 [02] SE0 check for stuffed bit 5
 27c:	91 f0       	breq	.+36     	; 0x2a2 <se0>
    andi    x3, ~0x20   	;1 [03]
 27e:	4f 7d       	andi	r20, 0xDF	; 223
    rjmp    didUnstuff5		;2 [04]
 280:	d6 cf       	rjmp	.-84     	; 0x22e <didUnstuff5>

00000282 <unstuff6>:
;-----------------------------------------------------
unstuff6:               	;- [08] 
    andi    x3, ~0x40   	;1 [09]
 282:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   	;1 [00] [10] <-- sample stuffed bit 6
 284:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK 	;1 [01]
 286:	04 71       	andi	r16, 0x14	; 20
    breq    se0         	;1 [02] SE0 check for stuffed bit 6
 288:	61 f0       	breq	.+24     	; 0x2a2 <se0>
    ori     shift, 0x40 	;1 [03]
 28a:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 	;2 [04]
 28c:	d9 cf       	rjmp	.-78     	; 0x240 <didUnstuff6>

0000028e <unstuff7>:
;-----------------------------------------------------
unstuff7:			;- [08]
    andi    x3, ~0x80   	;1 [09]
 28e:	4f 77       	andi	r20, 0x7F	; 127
    in      x2, USBIN   	;1 [00] [10] <-- sample stuffed bit 7
 290:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK 	;1 [01]
 292:	14 71       	andi	r17, 0x14	; 20
    breq    se0         	;1 [02] SE0 check for stuffed bit 7
 294:	31 f0       	breq	.+12     	; 0x2a2 <se0>
    ori     shift, 0x80 	;1 [03]
 296:	20 68       	ori	r18, 0x80	; 128
    rjmp    didUnstuff7 	;2 [04]
 298:	dc cf       	rjmp	.-72     	; 0x252 <didUnstuff7>

0000029a <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 29a:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 29c:	1c bb       	out	0x1c, r17	; 28

0000029e <ignorePacket>:
ignorePacket:
    clr     token
 29e:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 2a0:	17 c0       	rjmp	.+46     	; 0x2d0 <handleSetupOrOut>

000002a2 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 2a2:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 2a4:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 2a6:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 2a8:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 2aa:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 2ac:	1c bb       	out	0x1c, r17	; 28
    ld      token, y            ;[11]
 2ae:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 2b0:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 2b2:	f9 f0       	breq	.+62     	; 0x2f2 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 2b4:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 2b6:	e9 f0       	breq	.+58     	; 0x2f2 <handleData>
    lds     shift, usbDeviceAddr;[17]
 2b8:	20 91 0e 01 	lds	r18, 0x010E
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 2bc:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 2be:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 2c0:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 2c2:	ed cf       	rjmp	.-38     	; 0x29e <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
    rol     x3                  ;[26] shift in LSB of endpoint
#endif
    cpi     token, USBPID_IN    ;[27]
 2c4:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 2c6:	51 f1       	breq	.+84     	; 0x31c <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 2c8:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 2ca:	11 f0       	breq	.+4      	; 0x2d0 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 2cc:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 2ce:	39 f7       	brne	.-50     	; 0x29e <ignorePacket>

000002d0 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 2d0:	00 93 15 01 	sts	0x0115, r16

000002d4 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 2d4:	5f 91       	pop	r21
 2d6:	3f 91       	pop	r19
 2d8:	6f 91       	pop	r22
 2da:	4f 91       	pop	r20
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	2f 91       	pop	r18
 2e2:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 2e4:	cc b3       	in	r28, 0x1c	; 28
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 2e6:	c0 fd       	sbrc	r28, 0
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 2e8:	30 cf       	rjmp	.-416    	; 0x14a <waitForJ>

000002ea <sofError>:
sofError:
    POP_RETI                    ;macro call
 2ea:	cf 91       	pop	r28
 2ec:	cf bf       	out	0x3f, r28	; 63
 2ee:	cf 91       	pop	r28
    reti
 2f0:	18 95       	reti

000002f2 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 2f2:	20 91 15 01 	lds	r18, 0x0115
    tst     shift               ;[20]
 2f6:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 2f8:	69 f3       	breq	.-38     	; 0x2d4 <doReturn>
    lds     x2, usbRxLen        ;[22]
 2fa:	10 91 13 01 	lds	r17, 0x0113
    tst     x2                  ;[24]
 2fe:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 300:	31 f5       	brne	.+76     	; 0x34e <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 302:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 304:	32 f1       	brmi	.+76     	; 0x352 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 306:	30 93 13 01 	sts	0x0113, r19
    sts     usbRxToken, shift   ;[30]
 30a:	20 93 0f 01 	sts	0x010F, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
 30e:	10 91 10 01 	lds	r17, 0x0110
    ldi     cnt, USB_BUFSIZE    ;[34]
 312:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 314:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 316:	30 93 10 01 	sts	0x0110, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 31a:	1b c0       	rjmp	.+54     	; 0x352 <sendAckAndReti>

0000031c <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 31c:	00 91 13 01 	lds	r16, 0x0113
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 320:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 322:	ac f4       	brge	.+42     	; 0x34e <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 324:	0a e5       	ldi	r16, 0x5A	; 90
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 326:	30 91 01 01 	lds	r19, 0x0101
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 32a:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 32c:	13 c0       	rjmp	.+38     	; 0x354 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 32e:	00 93 01 01 	sts	0x0101, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 332:	c3 e0       	ldi	r28, 0x03	; 3
    ldi     YH, hi8(usbTxBuf)   ;[44]
 334:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 336:	12 c0       	rjmp	.+36     	; 0x35c <usbSendAndReti>

00000338 <bitstuffN>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies
;---------------------------------------------------------------------------
bitstuffN:		    	;- [04]
    eor     x1, x4          	;1 [05]
 338:	05 27       	eor	r16, r21
    clr	    x2			;1 [06]
 33a:	11 27       	eor	r17, r17
    nop				;1 [07]
 33c:	00 00       	nop
    rjmp    didStuffN       	;1 [08]
 33e:	19 c0       	rjmp	.+50     	; 0x372 <didStuffN>

00000340 <bitstuff6>:
;---------------------------------------------------------------------------    
bitstuff6:		    	;- [04]
    eor     x1, x4          	;1 [05]
 340:	05 27       	eor	r16, r21
    clr	    x2			;1 [06]
 342:	11 27       	eor	r17, r17
    rjmp    didStuff6       	;1 [07]
 344:	1f c0       	rjmp	.+62     	; 0x384 <didStuff6>

00000346 <bitstuff7>:
;---------------------------------------------------------------------------
bitstuff7:		    	;- [02]
    eor     x1, x4          	;1 [03]
 346:	05 27       	eor	r16, r21
    clr	    x2			;1 [06]
 348:	11 27       	eor	r17, r17
    nop			    	;1 [05]
 34a:	00 00       	nop
    rjmp    didStuff7       	;1 [06]
 34c:	24 c0       	rjmp	.+72     	; 0x396 <didStuff7>

0000034e <sendNakAndReti>:
;---------------------------------------------------------------------------
sendNakAndReti:			;- [-19]
    ldi     x3, USBPID_NAK  	;1 [-18]
 34e:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    sendX3AndReti   	;1 [-17]
 350:	02 c0       	rjmp	.+4      	; 0x356 <sendX3AndReti>

00000352 <sendAckAndReti>:
;---------------------------------------------------------------------------
sendAckAndReti:			;- [-17]
    ldi     cnt, USBPID_ACK 	;1 [-16]
 352:	32 ed       	ldi	r19, 0xD2	; 210

00000354 <sendCntAndReti>:
sendCntAndReti:			;- [-16]
    mov     x3, cnt         	;1 [-15]
 354:	43 2f       	mov	r20, r19

00000356 <sendX3AndReti>:
sendX3AndReti:			;- [-15]
    ldi     YL, 20          	;1 [-14] x3==r20 address is 20
 356:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0           	;1 [-13]
 358:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          	;1 [-12]
 35a:	32 e0       	ldi	r19, 0x02	; 2

0000035c <usbSendAndReti>:
;uses: x1...x4, btcnt, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
;We need not to match the transfer rate exactly because the spec demands 
;only 1.5% precision anyway.
usbSendAndReti:             	;- [-13] 13 cycles until SOP
    in      x2, USBDDR      	;1 [-12]
 35c:	1a b1       	in	r17, 0x0a	; 10
    ori     x2, USBMASK     	;1 [-11]
 35e:	14 61       	ori	r17, 0x14	; 20
    sbi     USBOUT, USBMINUS	;2 [-09-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 360:	5c 9a       	sbi	0x0b, 4	; 11
    in      x1, USBOUT      	;1 [-08] port mirror for tx loop
 362:	0b b1       	in	r16, 0x0b	; 11
    out     USBDDR, x2      	;1 [-07] <- acquire bus
 364:	1a b9       	out	0x0a, r17	; 10
	; need not init x2 (bitstuff history) because sync starts with 0 
    ldi     x4, USBMASK     	;1 [-06] 	exor mask
 366:	54 e1       	ldi	r21, 0x14	; 20
    ldi     shift, 0x80     	;1 [-05] 	sync byte is first byte sent
 368:	20 e8       	ldi	r18, 0x80	; 128
    ldi     bitcnt, 6    	;1 [-04] 
 36a:	66 e0       	ldi	r22, 0x06	; 6

0000036c <txBitLoop>:
txBitLoop:		    	;- [-04] [06]
    sbrs    shift, 0        	;1 [-03] [07]
 36c:	20 ff       	sbrs	r18, 0
    eor     x1, x4          	;1 [-02] [08] 
 36e:	05 27       	eor	r16, r21
    ror     shift           	;1 [-01] [09]  
 370:	27 95       	ror	r18

00000372 <didStuffN>:
didStuffN:		    	;-       [09]
    out     USBOUT, x1      	;1 [00]  [10] <-- out N
 372:	0b b9       	out	0x0b, r16	; 11
    ror     x2              	;1 [01]
 374:	17 95       	ror	r17
    cpi     x2, 0xfc        	;1 [02]
 376:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       	;1 [03]
 378:	f8 f6       	brcc	.-66     	; 0x338 <bitstuffN>
    dec     bitcnt          	;1 [04]
 37a:	6a 95       	dec	r22
    brne    txBitLoop       	;1 [05]
 37c:	b9 f7       	brne	.-18     	; 0x36c <txBitLoop>
    sbrs    shift, 0        	;1 [06]
 37e:	20 ff       	sbrs	r18, 0
    eor     x1, x4          	;1 [07]
 380:	05 27       	eor	r16, r21
    ror     shift           	;1 [08]
 382:	27 95       	ror	r18

00000384 <didStuff6>:
didStuff6:			;- [08]
    nop				;1 [09]
 384:	00 00       	nop
    out     USBOUT, x1      	;1 [00] [10] <-- out 6
 386:	0b b9       	out	0x0b, r16	; 11
    ror     x2              	;1 [01] 
 388:	17 95       	ror	r17
    cpi     x2, 0xfc        	;1 [02]
 38a:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff6       	;1 [03]
 38c:	c8 f6       	brcc	.-78     	; 0x340 <bitstuff6>
    sbrs    shift, 0        	;1 [04]
 38e:	20 ff       	sbrs	r18, 0
    eor     x1, x4          	;1 [05]
 390:	05 27       	eor	r16, r21
    ror     shift           	;1 [06]
 392:	27 95       	ror	r18
    ror     x2              	;1 [07]
 394:	17 95       	ror	r17

00000396 <didStuff7>:
didStuff7:			;- [07]
    ldi     bitcnt, 6    	;1 [08]
 396:	66 e0       	ldi	r22, 0x06	; 6
    cpi     x2, 0xfc        	;1 [09]
 398:	1c 3f       	cpi	r17, 0xFC	; 252
    out     USBOUT, x1      	;1 [00] [10] <-- out 7
 39a:	0b b9       	out	0x0b, r16	; 11
    brcc    bitstuff7       	;1 [01]
 39c:	a0 f6       	brcc	.-88     	; 0x346 <bitstuff7>
    ld      shift, y+       	;2 [02+03]
 39e:	29 91       	ld	r18, Y+
    dec     cnt             	;1 [04]
 3a0:	3a 95       	dec	r19
    brne    txBitLoop      	;1 [05]
 3a2:	21 f7       	brne	.-56     	; 0x36c <txBitLoop>

000003a4 <makeSE0>:
makeSE0:
    cbr     x1, USBMASK     	;1 [06] 	prepare SE0 [spec says EOP may be 19 to 23 cycles]
 3a4:	0b 7e       	andi	r16, 0xEB	; 235
    lds     x2, usbNewDeviceAddr;2 [07+08]
 3a6:	10 91 14 01 	lds	r17, 0x0114
    lsl     x2                  ;1 [09] we compare with left shifted address
 3aa:	11 0f       	add	r17, r17
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    out     USBOUT, x1      	;1 [00] [10] <-- out SE0-- from now 2 bits==20 cycl. until bus idle
 3ac:	0b b9       	out	0x0b, r16	; 11
    subi    YL, 20 + 2          ;1 [01] Only assign address on data packets, not ACK/NAK in x3
 3ae:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0           	;1 [02]
 3b0:	d0 40       	sbci	r29, 0x00	; 0
    breq    skipAddrAssign  	;1 [03]
 3b2:	11 f0       	breq	.+4      	; 0x3b8 <skipAddrAssign>
    sts     usbDeviceAddr, x2	;2 [04+05] if not skipped: SE0 is one cycle longer
 3b4:	10 93 0e 01 	sts	0x010E, r17

000003b8 <skipAddrAssign>:
;----------------------------------------------------------------------------
;end of usbDeviceAddress transfer
skipAddrAssign:				;- [03/04]
    ldi     x2, 1<<USB_INTR_PENDING_BIT	;1 [05] int0 occurred during TX -- clear pending flag
 3b8:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)           ;1 [06]
 3ba:	1c bb       	out	0x1c, r17	; 28
    ori     x1, USBIDLE     		;1 [07]
 3bc:	00 61       	ori	r16, 0x10	; 16
    in      x2, USBDDR      		;1 [08]
 3be:	1a b1       	in	r17, 0x0a	; 10
    cbr     x2, USBMASK     		;1 [09] set both pins to input
 3c0:	1b 7e       	andi	r17, 0xEB	; 235
    mov     x3, x1          		;1 [10]
 3c2:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     		;1 [11] configure no pullup on both pins
 3c4:	4b 7e       	andi	r20, 0xEB	; 235
    ldi     x4, 3           		;1 [12]
 3c6:	53 e0       	ldi	r21, 0x03	; 3

000003c8 <se0Delay>:
se0Delay:				;- [12] [15] 
    dec     x4              		;1 [13] [16] 
 3c8:	5a 95       	dec	r21
    brne    se0Delay        		;1 [14] [17] 
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <se0Delay>
    nop2				;2      [18+19]
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <se0Delay+0x6>
    out     USBOUT, x1      		;1      [20] <--out J (idle) -- end of SE0 (EOP sig.)
 3ce:	0b b9       	out	0x0b, r16	; 11
    out     USBDDR, x2      		;1      [21] <--release bus now
 3d0:	1a b9       	out	0x0a, r17	; 10
    out     USBOUT, x3      		;1      [22] <--ensure no pull-up resistors are active
 3d2:	4b b9       	out	0x0b, r20	; 11
    rjmp    doReturn			;1	[23]
 3d4:	7f cf       	rjmp	.-258    	; 0x2d4 <doReturn>

000003d6 <usbFunctionSetup>:
/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
	usbRequest_t *rq = (void *)data;
	switch (rq->bRequest)
 3d6:	fc 01       	movw	r30, r24
 3d8:	21 81       	ldd	r18, Z+1	; 0x01
 3da:	21 30       	cpi	r18, 0x01	; 1
 3dc:	31 f4       	brne	.+12     	; 0x3ea <usbFunctionSetup+0x14>
	{
		case USB_LED_POWER_SET :
			if((rq->wValue.bytes[0] & 0x01) == 0x01)
 3de:	82 81       	ldd	r24, Z+2	; 0x02
 3e0:	80 ff       	sbrs	r24, 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <usbFunctionSetup+0x12>
			{    /* set LED */
				bit_is_set(USB_LED_POWER_PORT, USB_LED_POWER_PIN);
 3e4:	85 b1       	in	r24, 0x05	; 5
				return SET_OK;
 3e6:	01 c0       	rjmp	.+2      	; 0x3ea <usbFunctionSetup+0x14>
			}
			else if((rq->wValue.bytes[0] & 0x00) == 0x00)
			{                          /* clear LED */
				bit_is_clear(USB_LED_POWER_PORT, USB_LED_POWER_PIN);
 3e8:	85 b1       	in	r24, 0x05	; 5
         * not implemented since we never call them. The operating system
         * won't call them either because our descriptor defines no meaning.
         * /*/
    }
    return 0;   /* default for not implemented requests: return no data back to host */
}
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	08 95       	ret

000003ee <main>:
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 3ee:	9e e0       	ldi	r25, 0x0E	; 14
 3f0:	88 e1       	ldi	r24, 0x18	; 24
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	f8 94       	cli
 3f6:	a8 95       	wdr
 3f8:	80 93 60 00 	sts	0x0060, r24
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	90 93 60 00 	sts	0x0060, r25
{
	uchar	i=0;

    wdt_enable(WDTO_1S);
    
    usbInit();
 402:	0e 94 22 03 	call	0x644	; 0x644 <usbInit>
    
	usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
 406:	54 9a       	sbi	0x0a, 4	; 10
 408:	8a ef       	ldi	r24, 0xFA	; 250
    
    for (i=0; i<250; i++)
    {         /* fake USB disconnect for > 500 ms */
        wdt_reset();
 40a:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40c:	eb e4       	ldi	r30, 0x4B	; 75
 40e:	fd e1       	ldi	r31, 0x1D	; 29
 410:	31 97       	sbiw	r30, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <main+0x22>
 414:	00 c0       	rjmp	.+0      	; 0x416 <main+0x28>
 416:	00 00       	nop
 418:	81 50       	subi	r24, 0x01	; 1
    
    usbInit();
    
	usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    
    for (i=0; i<250; i++)
 41a:	b9 f7       	brne	.-18     	; 0x40a <main+0x1c>
    {         /* fake USB disconnect for > 500 ms */
        wdt_reset();
        _delay_ms(2);
    }
    usbDeviceConnect();
 41c:	54 98       	cbi	0x0a, 4	; 10
    //LED_PORT_DDR |= _BV(LED_BIT);   /* make the LED bit an output */
    sei();
 41e:	78 94       	sei
    //DBG1(0x01, 0, 0);       /* debug output: main loop starts */
    while (1)
    {
        wdt_reset();
 420:	a8 95       	wdr
        usbPoll();
 422:	0e 94 14 02 	call	0x428	; 0x428 <usbPoll>
		
	}
 426:	fc cf       	rjmp	.-8      	; 0x420 <main+0x32>

00000428 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 42c:	80 91 13 01 	lds	r24, 0x0113
 430:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
 432:	0a f4       	brpl	.+2      	; 0x436 <usbPoll+0xe>
 434:	9f c0       	rjmp	.+318    	; 0x574 <usbPoll+0x14c>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 436:	20 91 10 01 	lds	r18, 0x0110
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 43a:	90 91 0f 01 	lds	r25, 0x010F
 43e:	9d 32       	cpi	r25, 0x2D	; 45
 440:	09 f0       	breq	.+2      	; 0x444 <usbPoll+0x1c>
 442:	96 c0       	rjmp	.+300    	; 0x570 <usbPoll+0x148>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 444:	88 30       	cpi	r24, 0x08	; 8
 446:	09 f0       	breq	.+2      	; 0x44a <usbPoll+0x22>
 448:	93 c0       	rjmp	.+294    	; 0x570 <usbPoll+0x148>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 44a:	cc e0       	ldi	r28, 0x0C	; 12
 44c:	d0 e0       	ldi	r29, 0x00	; 0
 44e:	c2 1b       	sub	r28, r18
 450:	d1 09       	sbc	r29, r1
 452:	c9 5e       	subi	r28, 0xE9	; 233
 454:	de 4f       	sbci	r29, 0xFE	; 254
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 456:	83 ec       	ldi	r24, 0xC3	; 195
 458:	80 93 03 01 	sts	0x0103, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 45c:	8a e5       	ldi	r24, 0x5A	; 90
 45e:	80 93 01 01 	sts	0x0101, r24
        usbMsgFlags = 0;
 462:	10 92 02 01 	sts	0x0102, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 466:	88 81       	ld	r24, Y
 468:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 46a:	21 f0       	breq	.+8      	; 0x474 <usbPoll+0x4c>
            replyLen = usbFunctionSetup(data);
 46c:	ce 01       	movw	r24, r28
 46e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <usbFunctionSetup>
 472:	75 c0       	rjmp	.+234    	; 0x55e <usbPoll+0x136>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 474:	8a 81       	ldd	r24, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 476:	10 92 0c 01 	sts	0x010C, r1
    SWITCH_START(rq->bRequest)
 47a:	99 81       	ldd	r25, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 47c:	91 11       	cpse	r25, r1
 47e:	06 c0       	rjmp	.+12     	; 0x48c <usbPoll+0x64>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 480:	10 92 0d 01 	sts	0x010D, r1
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 484:	2c e0       	ldi	r18, 0x0C	; 12
 486:	31 e0       	ldi	r19, 0x01	; 1
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 488:	82 e0       	ldi	r24, 0x02	; 2
 48a:	65 c0       	rjmp	.+202    	; 0x556 <usbPoll+0x12e>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 48c:	95 30       	cpi	r25, 0x05	; 5
 48e:	31 f4       	brne	.+12     	; 0x49c <usbPoll+0x74>
        usbNewDeviceAddr = value;
 490:	80 93 14 01 	sts	0x0114, r24
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 494:	2c e0       	ldi	r18, 0x0C	; 12
 496:	31 e0       	ldi	r19, 0x01	; 1
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	5d c0       	rjmp	.+186    	; 0x556 <usbPoll+0x12e>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 49c:	96 30       	cpi	r25, 0x06	; 6
 49e:	09 f0       	breq	.+2      	; 0x4a2 <usbPoll+0x7a>
 4a0:	46 c0       	rjmp	.+140    	; 0x52e <usbPoll+0x106>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 4a2:	9b 81       	ldd	r25, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 4a4:	91 30       	cpi	r25, 0x01	; 1
 4a6:	41 f4       	brne	.+16     	; 0x4b8 <usbPoll+0x90>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 4a8:	8e e8       	ldi	r24, 0x8E	; 142
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	90 93 12 01 	sts	0x0112, r25
 4b0:	80 93 11 01 	sts	0x0111, r24
 4b4:	82 e1       	ldi	r24, 0x12	; 18
 4b6:	37 c0       	rjmp	.+110    	; 0x526 <usbPoll+0xfe>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 4b8:	92 30       	cpi	r25, 0x02	; 2
 4ba:	41 f4       	brne	.+16     	; 0x4cc <usbPoll+0xa4>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 4bc:	8c e7       	ldi	r24, 0x7C	; 124
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	90 93 12 01 	sts	0x0112, r25
 4c4:	80 93 11 01 	sts	0x0111, r24
 4c8:	82 e1       	ldi	r24, 0x12	; 18
 4ca:	2d c0       	rjmp	.+90     	; 0x526 <usbPoll+0xfe>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 4cc:	93 30       	cpi	r25, 0x03	; 3
 4ce:	41 f5       	brne	.+80     	; 0x520 <usbPoll+0xf8>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 4d0:	81 11       	cpse	r24, r1
 4d2:	08 c0       	rjmp	.+16     	; 0x4e4 <usbPoll+0xbc>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 4d4:	80 ed       	ldi	r24, 0xD0	; 208
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	90 93 12 01 	sts	0x0112, r25
 4dc:	80 93 11 01 	sts	0x0111, r24
 4e0:	84 e0       	ldi	r24, 0x04	; 4
 4e2:	21 c0       	rjmp	.+66     	; 0x526 <usbPoll+0xfe>
        SWITCH_CASE(1)
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	41 f4       	brne	.+16     	; 0x4f8 <usbPoll+0xd0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 4e8:	8c eb       	ldi	r24, 0xBC	; 188
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	90 93 12 01 	sts	0x0112, r25
 4f0:	80 93 11 01 	sts	0x0111, r24
 4f4:	84 e1       	ldi	r24, 0x14	; 20
 4f6:	17 c0       	rjmp	.+46     	; 0x526 <usbPoll+0xfe>
        SWITCH_CASE(2)
 4f8:	82 30       	cpi	r24, 0x02	; 2
 4fa:	41 f4       	brne	.+16     	; 0x50c <usbPoll+0xe4>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 4fc:	82 eb       	ldi	r24, 0xB2	; 178
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	90 93 12 01 	sts	0x0112, r25
 504:	80 93 11 01 	sts	0x0111, r24
 508:	8a e0       	ldi	r24, 0x0A	; 10
 50a:	0d c0       	rjmp	.+26     	; 0x526 <usbPoll+0xfe>
        SWITCH_CASE(3)
 50c:	83 30       	cpi	r24, 0x03	; 3
 50e:	51 f4       	brne	.+20     	; 0x524 <usbPoll+0xfc>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER, usbDescriptorStringSerialNumber)
 510:	80 ea       	ldi	r24, 0xA0	; 160
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	90 93 12 01 	sts	0x0112, r25
 518:	80 93 11 01 	sts	0x0111, r24
 51c:	82 e1       	ldi	r24, 0x12	; 18
 51e:	03 c0       	rjmp	.+6      	; 0x526 <usbPoll+0xfe>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	01 c0       	rjmp	.+2      	; 0x526 <usbPoll+0xfe>
 524:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 526:	90 e4       	ldi	r25, 0x40	; 64
 528:	90 93 02 01 	sts	0x0102, r25
 52c:	18 c0       	rjmp	.+48     	; 0x55e <usbPoll+0x136>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 52e:	98 30       	cpi	r25, 0x08	; 8
 530:	79 f0       	breq	.+30     	; 0x550 <usbPoll+0x128>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 532:	99 30       	cpi	r25, 0x09	; 9
 534:	31 f4       	brne	.+12     	; 0x542 <usbPoll+0x11a>
        usbConfiguration = value;
 536:	80 93 16 01 	sts	0x0116, r24
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 53a:	2c e0       	ldi	r18, 0x0C	; 12
 53c:	31 e0       	ldi	r19, 0x01	; 1
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	0a c0       	rjmp	.+20     	; 0x556 <usbPoll+0x12e>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	9a 30       	cpi	r25, 0x0A	; 10
 546:	09 f0       	breq	.+2      	; 0x54a <usbPoll+0x122>
 548:	80 e0       	ldi	r24, 0x00	; 0
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 54a:	2c e0       	ldi	r18, 0x0C	; 12
 54c:	31 e0       	ldi	r19, 0x01	; 1
 54e:	03 c0       	rjmp	.+6      	; 0x556 <usbPoll+0x12e>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 550:	26 e1       	ldi	r18, 0x16	; 22
 552:	31 e0       	ldi	r19, 0x01	; 1
        len = 1;
 554:	81 e0       	ldi	r24, 0x01	; 1
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
 556:	30 93 12 01 	sts	0x0112, r19
 55a:	20 93 11 01 	sts	0x0111, r18
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 55e:	9f 81       	ldd	r25, Y+7	; 0x07
 560:	91 11       	cpse	r25, r1
 562:	04 c0       	rjmp	.+8      	; 0x56c <usbPoll+0x144>
 564:	9e 81       	ldd	r25, Y+6	; 0x06
 566:	98 17       	cp	r25, r24
 568:	08 f4       	brcc	.+2      	; 0x56c <usbPoll+0x144>
 56a:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 56c:	80 93 00 01 	sts	0x0100, r24
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 570:	10 92 13 01 	sts	0x0113, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 574:	80 91 01 01 	lds	r24, 0x0101
 578:	84 ff       	sbrs	r24, 4
 57a:	4c c0       	rjmp	.+152    	; 0x614 <usbPoll+0x1ec>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 57c:	80 91 00 01 	lds	r24, 0x0100
 580:	8f 3f       	cpi	r24, 0xFF	; 255
 582:	09 f4       	brne	.+2      	; 0x586 <usbPoll+0x15e>
 584:	47 c0       	rjmp	.+142    	; 0x614 <usbPoll+0x1ec>
 586:	c8 2f       	mov	r28, r24
 588:	89 30       	cpi	r24, 0x09	; 9
 58a:	08 f0       	brcs	.+2      	; 0x58e <usbPoll+0x166>
 58c:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 58e:	8c 1b       	sub	r24, r28
 590:	80 93 00 01 	sts	0x0100, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 594:	e3 e0       	ldi	r30, 0x03	; 3
 596:	f1 e0       	ldi	r31, 0x01	; 1
 598:	90 81       	ld	r25, Z
 59a:	88 e8       	ldi	r24, 0x88	; 136
 59c:	89 27       	eor	r24, r25
 59e:	80 83       	st	Z, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 5a0:	cc 23       	and	r28, r28
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <usbPoll+0x17e>
 5a4:	45 c0       	rjmp	.+138    	; 0x630 <usbPoll+0x208>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
 5a6:	20 91 11 01 	lds	r18, 0x0111
 5aa:	30 91 12 01 	lds	r19, 0x0112
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 5ae:	80 91 02 01 	lds	r24, 0x0102
 5b2:	86 ff       	sbrs	r24, 6
 5b4:	10 c0       	rjmp	.+32     	; 0x5d6 <usbPoll+0x1ae>
 5b6:	a4 e0       	ldi	r26, 0x04	; 4
 5b8:	b1 e0       	ldi	r27, 0x01	; 1
 5ba:	f9 01       	movw	r30, r18
 5bc:	8c 2f       	mov	r24, r28
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 5be:	94 91       	lpm	r25, Z
                    *data++ = c;
 5c0:	9d 93       	st	X+, r25
                    r++;
 5c2:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 5c4:	81 50       	subi	r24, 0x01	; 1
 5c6:	d9 f7       	brne	.-10     	; 0x5be <usbPoll+0x196>
 5c8:	2f 5f       	subi	r18, 0xFF	; 255
 5ca:	3f 4f       	sbci	r19, 0xFF	; 255
 5cc:	8f ef       	ldi	r24, 0xFF	; 255
 5ce:	8c 0f       	add	r24, r28
 5d0:	28 0f       	add	r18, r24
 5d2:	31 1d       	adc	r19, r1
 5d4:	0e c0       	rjmp	.+28     	; 0x5f2 <usbPoll+0x1ca>
 5d6:	a4 e0       	ldi	r26, 0x04	; 4
 5d8:	b1 e0       	ldi	r27, 0x01	; 1
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 5da:	f9 01       	movw	r30, r18
 5dc:	8c 2f       	mov	r24, r28
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
 5de:	91 91       	ld	r25, Z+
 5e0:	9d 93       	st	X+, r25
                    r++;
                }while(--i);
 5e2:	81 50       	subi	r24, 0x01	; 1
 5e4:	e1 f7       	brne	.-8      	; 0x5de <usbPoll+0x1b6>
 5e6:	2f 5f       	subi	r18, 0xFF	; 255
 5e8:	3f 4f       	sbci	r19, 0xFF	; 255
 5ea:	8f ef       	ldi	r24, 0xFF	; 255
 5ec:	8c 0f       	add	r24, r28
 5ee:	28 0f       	add	r18, r24
 5f0:	31 1d       	adc	r19, r1
            }
            usbMsgPtr = r;
 5f2:	30 93 12 01 	sts	0x0112, r19
 5f6:	20 93 11 01 	sts	0x0111, r18
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 5fa:	6c 2f       	mov	r22, r28
 5fc:	84 e0       	ldi	r24, 0x04	; 4
 5fe:	91 e0       	ldi	r25, 0x01	; 1
 600:	0e 94 9e 00 	call	0x13c	; 0x13c <usbCrc16Append>
        len += 4;           /* length including sync byte */
 604:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 606:	cc 30       	cpi	r28, 0x0C	; 12
 608:	18 f4       	brcc	.+6      	; 0x610 <usbPoll+0x1e8>
            usbMsgLen = USB_NO_MSG;
 60a:	8f ef       	ldi	r24, 0xFF	; 255
 60c:	80 93 00 01 	sts	0x0100, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 610:	c0 93 01 01 	sts	0x0101, r28
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 614:	89 b1       	in	r24, 0x09	; 9
 616:	84 71       	andi	r24, 0x14	; 20
        if(usbLineStatus != 0)  /* SE0 has ended */
 618:	91 f4       	brne	.+36     	; 0x63e <usbPoll+0x216>
 61a:	93 e1       	ldi	r25, 0x13	; 19
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 61c:	89 b1       	in	r24, 0x09	; 9
 61e:	84 71       	andi	r24, 0x14	; 20
        if(usbLineStatus != 0)  /* SE0 has ended */
 620:	71 f4       	brne	.+28     	; 0x63e <usbPoll+0x216>
 622:	91 50       	subi	r25, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 624:	d9 f7       	brne	.-10     	; 0x61c <usbPoll+0x1f4>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 626:	10 92 14 01 	sts	0x0114, r1
    usbDeviceAddr = 0;
 62a:	10 92 0e 01 	sts	0x010E, r1
 62e:	07 c0       	rjmp	.+14     	; 0x63e <usbPoll+0x216>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 630:	6c 2f       	mov	r22, r28
 632:	84 e0       	ldi	r24, 0x04	; 4
 634:	91 e0       	ldi	r25, 0x01	; 1
 636:	0e 94 9e 00 	call	0x13c	; 0x13c <usbCrc16Append>
        len += 4;           /* length including sync byte */
 63a:	cc 5f       	subi	r28, 0xFC	; 252
 63c:	e6 cf       	rjmp	.-52     	; 0x60a <usbPoll+0x1e2>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	08 95       	ret

00000644 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 644:	e9 e6       	ldi	r30, 0x69	; 105
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	80 81       	ld	r24, Z
 64a:	82 60       	ori	r24, 0x02	; 2
 64c:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 64e:	e8 9a       	sbi	0x1d, 0	; 29
 650:	08 95       	ret

00000652 <_exit>:
 652:	f8 94       	cli

00000654 <__stop_program>:
 654:	ff cf       	rjmp	.-2      	; 0x654 <__stop_program>
